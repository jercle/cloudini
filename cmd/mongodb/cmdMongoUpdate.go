package mongodb

import (
	"context"
	"fmt"
	"time"

	"github.com/jercle/cloudini/cmd/azure"
	"github.com/jercle/cloudini/lib"
	"github.com/spf13/cobra"
)

var (
	updateAllGalleryImagesAndUpdateWithUsedByCitrix bool
	updateAzureResVcpuCountsCostData                bool
	updateAzureResourceRelations                    bool
	costDataMonth                                   string
	updateEntraItems                                bool
	updateEntraPimItems                             bool
	updateIpAddresses                               bool
	updateO365Data                                  bool
	updateAllCertInfo                               bool
	showExecutionTime                               bool
	updateADUsers                                   bool
	updateB2CUsers                                  bool
	updateWebsiteCertInfo                           bool
	updateSupportAlerts                             bool
	updateAWSMonitoringData                         bool
	updateAll                                       bool
	updateResources                                 bool

// tenantId       string
// subscriptionId string
// resourceGroup  string
// clientSecret   string
// clientId       string
)

var cmdMongoUpdate = &cobra.Command{
	Use:   "update",
	Short: "Updates data in MongoDB generated by Cloudini, using selected flags",
	// 	Long: `A longer description that spans multiple lines and likely contains examples
	// and usage of using your command. For example:

	// Cobra is a CLI library for Go that empowers applications.
	// This application is a tool to generate the needed files
	// to quickly create a Cobra application.`,
	Run: func(cmd *cobra.Command, args []string) {
		startTime := time.Now()
		config := lib.GetCldConfig(nil)
		mongoConf := config.MongoDBConfig

		ctx, cancel := context.WithTimeout(context.Background(), 20*time.Second)
		defer cancel()

		c := ClientFromConfig(ctx, cancel)
		defer c.Disconnect(ctx)

		// adUsers := c.Database(mongoConf.DbAD).Collection(mongoConf.CollADUsers)
		// _ = adUsers

		awsMonitoringColl := c.Database(mongoConf.DbAWSMonitoring).Collection(mongoConf.CollAWSMonLogging)

		azResImageGalleryImagesColl := c.Database(mongoConf.DbAzRes).Collection(mongoConf.CollAzResImageGalleryImages)
		azResResourceListColl := c.Database(mongoConf.DbAzRes).Collection(mongoConf.CollAzResResourceList)
		azResGrpsListColl := c.Database(mongoConf.DbAzRes).Collection(mongoConf.CollAzResGrpsList)
		azResSKUColl := c.Database(mongoConf.DbAzRes).Collection(mongoConf.CollAzResSKU)
		azResTenantsColl := c.Database(mongoConf.DbAzRes).Collection(mongoConf.CollAzResTenants)
		azResVcpuCountsColl := c.Database(mongoConf.DbAzRes).Collection(mongoConf.CollAzResVcpuCounts)
		azResIpAddresses := c.Database(mongoConf.DbAzRes).Collection(mongoConf.CollAzResIPAddresses)
		azStorageAcctMinTlsVersions := c.Database(mongoConf.DbAzRes).Collection(mongoConf.CollAzStorageAcctMinTlsVersions)

		citrixMachineCatalogsColl := c.Database(mongoConf.DbCitrix).Collection(mongoConf.CollCitrixMachineCatalogs)

		certsCaCertInfo := c.Database(mongoConf.DbCertificates).Collection(mongoConf.CollCertsCaCertInfo)
		certsServerCertInfo := c.Database(mongoConf.DbCertificates).Collection(mongoConf.CollCertsServerCertInfo)

		entraAppRegColl := c.Database(mongoConf.DbEntra).Collection(mongoConf.CollEntraAppReg)
		entraAppRegCredsExpiringColl := c.Database(mongoConf.DbEntra).Collection(mongoConf.CollEntraAppRegCredsExpiring)
		entraRoleAssignmentScheduleInstancesColl := c.Database(mongoConf.DbEntra).Collection(mongoConf.CollEntraRoleAssignmentScheduleInstances)
		entraRoleEligibilityScheduleInstancesColl := c.Database(mongoConf.DbEntra).Collection(mongoConf.CollEntraRoleEligibilityScheduleInstances)
		entraB2CUsersColl := c.Database(mongoConf.DbEntra).Collection(mongoConf.CollEntraB2CUsers)

		// envOptCostingColl := c.Database(mongoConf.DbEnvironmentOptimisation).Collection(mongoConf.CollEnvOptCosting)
		envOptCostingMetersColl := c.Database(mongoConf.DbEnvironmentOptimisation).Collection(mongoConf.CollEnvOptCostingMeters)
		envOptCostingResGrpsColl := c.Database(mongoConf.DbEnvironmentOptimisation).Collection(mongoConf.CollEnvOptCostingResGrps)
		envOptCostingResourcesColl := c.Database(mongoConf.DbEnvironmentOptimisation).Collection(mongoConf.CollEnvOptCostingResources)
		envOptCostingSubsColl := c.Database(mongoConf.DbEnvironmentOptimisation).Collection(mongoConf.CollEnvOptCostingSubs)
		envOptCostingTenantsColl := c.Database(mongoConf.DbEnvironmentOptimisation).Collection(mongoConf.CollEnvOptCostingTenants)

		genSupportAlertsColl := c.Database(mongoConf.DbGeneral).Collection(mongoConf.CollGenSupportAlerts)

		m365MailboxStatisticsColl := c.Database(mongoConf.DbM365).Collection(mongoConf.CollM365MailboxStatistics)

		tokenReq, err := azure.GetAllTenantSPTokens(lib.AzureMultiAuthTokenRequestOptions{}, nil)
		lib.CheckFatalError(err)

		if updateAll || updateIpAddresses {
			UpdateAllAzureResourceIPAddresses(azResIpAddresses, tokenReq)
		}

		if updateAll || updateAllGalleryImagesAndUpdateWithUsedByCitrix {
			UpdateAllGalleryImagesAndUpdateWithUsedByCitrix(azResImageGalleryImagesColl, citrixMachineCatalogsColl, tokenReq)
		}

		if updateAll || updateAllCertInfo {
			UpdateAllCertInfo(certsCaCertInfo, certsServerCertInfo)
		}

		if updateAll || updateEntraItems {
			appRegOpts := UpdateEntraItemsOptions{
				EntraAppRegColl:              entraAppRegColl,
				EntraAppRegCredsExpiringColl: entraAppRegCredsExpiringColl,
			}
			UpdateEntraItems(appRegOpts, tokenReq)
		}

		if updateAll || updateEntraPimItems {
			opts := UpdateEntraPimItemsOptions{
				EntraRoleAssignmentScheduleInstancesColl:  entraRoleAssignmentScheduleInstancesColl,
				EntraRoleEligibilityScheduleInstancesColl: entraRoleEligibilityScheduleInstancesColl,
			}
			UpdateEntraPimItems(opts)
		}

		// Longest running, so keep last
		if updateAll || updateAzureResVcpuCountsCostData {
			opts := UpdateAllAzureResourcesAndVcpuCountsOptions{
				SkuListSubscription:         config.Azure.SkuListSubscription,
				SkuListAuth:                 config.Azure.MultiTenantAuth.Tenants[config.Azure.SkuListAuthTenant],
				Location:                    config.Azure.ResourceLocation,
				CostDataMonth:               costDataMonth,
				CostDataBlobPrefix:          config.Azure.CostDataBlobPrefix,
				AzResSKUColl:                azResSKUColl,
				AzResVcpuCountsColl:         azResVcpuCountsColl,
				AzResTenantsColl:            azResTenantsColl,
				AzResResourceListColl:       azResResourceListColl,
				AzResGrpsListColl:           azResGrpsListColl,
				AzStorageAcctMinTlsVersions: azStorageAcctMinTlsVersions,
				EnvOptCostingTenantsColl:    envOptCostingTenantsColl,
				EnvOptCostingSubsColl:       envOptCostingSubsColl,
				EnvOptCostingResGrpsColl:    envOptCostingResGrpsColl,
				EnvOptCostingResourcesColl:  envOptCostingResourcesColl,
				EnvOptCostingMetersColl:     envOptCostingMetersColl,
			}
			transformedData := UpdateAllAzureResourcesVcpuCountsCostData(opts, tokenReq)

			if updateAzureResourceRelations {
				UpdateAzureResourceRelations(transformedData, opts)
			}
		}

		if updateResources {
			opts := UpdateAllAzureResourcesAndVcpuCountsOptions{
				SkuListSubscription:   config.Azure.SkuListSubscription,
				SkuListAuth:           config.Azure.MultiTenantAuth.Tenants[config.Azure.SkuListAuthTenant],
				Location:              config.Azure.ResourceLocation,
				AzResResourceListColl: azResResourceListColl,
			}
			UpdateAllAzureResources(opts, tokenReq)
		}

		// if updateADUsers {
		// 	UpdateADUsers(adUsers)
		// }

		if updateAll || updateB2CUsers {
			UpdateB2CUsers(entraB2CUsersColl)
		}

		if updateAll || updateO365Data {
			UpdateM365Data(m365MailboxStatisticsColl)
		}

		if updateWebsiteCertInfo {
			UpdateWebsiteCertsPullingFromDatabase(c)
		}

		if updateAll || updateSupportAlerts {
			UpdateSupportAlerts(genSupportAlertsColl)
		}

		if updateAll || updateAWSMonitoringData {
			UpdateAWSMonitoringData(awsMonitoringColl)
		}

		elapsed := time.Since(startTime)
		if showExecutionTime {
			fmt.Println("Execution time: " + elapsed.String())
		}
	},
}

func init() {
	cmdMongo.AddCommand(cmdMongoUpdate)
	cmdMongoUpdate.Flags().BoolVarP(&updateAllGalleryImagesAndUpdateWithUsedByCitrix, "updateAllGalleryImagesAndUpdateWithUsedByCitrix", "g", false, "Gets all gallery images in configured tenants, then checks agains Citrix and updates in database")
	cmdMongoUpdate.Flags().BoolVarP(&updateAzureResVcpuCountsCostData, "updateAzureResVcpuCountsCostData", "c", false, "Gets latest cost data and all resources, transforms and relates them, then updates database")
	cmdMongoUpdate.Flags().BoolVar(&updateAzureResourceRelations, "updateAzureResourceRelations", false, "Gets all resources from cost data and database, aggregates and finds relations, then updates database. This can only be used in conjunction with 'updateAzureResVcpuCountsCostData'")
	cmdMongoUpdate.Flags().BoolVarP(&updateEntraItems, "updateEntraItems", "e", false, "Gets all App Registrations from configured Azure tenants and finds expiring credentials, then updates database")
	cmdMongoUpdate.Flags().BoolVarP(&updateIpAddresses, "updateIpAddresses", "i", false, "Gets all App Registrations from configured Azure tenants and finds expiring credentials, then updates database")
	cmdMongoUpdate.Flags().BoolVarP(&updateAllCertInfo, "updateAllCertInfo", "x", false, "Update server certificates and expiries")
	cmdMongoUpdate.Flags().BoolVarP(&updateEntraPimItems, "updateEntraPimItems", "p", false, "Gets all PIM assignments and eligibilities, then updates database")
	cmdMongoUpdate.Flags().BoolVarP(&showExecutionTime, "showExecutionTime", "t", false, "Prints execution time when complete")
	cmdMongoUpdate.Flags().StringVarP(&costDataMonth, "costDataMonth", "m", "", "Which month to get cost data from - defaults to whatever month it was yesterday. Use with 'updateAzureResVcpuCountsCostData' Format: YYYYMM")
	// cmdMongoUpdate.Flags().BoolVarP(&updateADUsers, "updateADUsers", "a", false, "Get AD users and update database")
	cmdMongoUpdate.Flags().BoolVarP(&updateO365Data, "updateM365Data", "o", false, "Updates O365 data")
	cmdMongoUpdate.Flags().BoolVarP(&updateB2CUsers, "updateB2CUsers", "b", false, "Updates B2C users")
	cmdMongoUpdate.Flags().BoolVarP(&updateWebsiteCertInfo, "updateWebsiteCertInfo", "w", false, "Updates Website Cert info from configured URLs in database")
	cmdMongoUpdate.Flags().BoolVarP(&updateSupportAlerts, "updateSupportAlerts", "s", false, "Updates Support alerts")
	cmdMongoUpdate.Flags().BoolVarP(&updateResources, "updateResources", "r", false, "Updates Database with current Azure resources")
	cmdMongoUpdate.Flags().BoolVarP(&updateAWSMonitoringData, "updateAWSMonitoringData", "l", false, "Updates Database with AWS Monitoring data")
	cmdMongoUpdate.Flags().BoolVar(&updateAll, "updateAll", false, "Updates all data as if providing all available flags. Currently excludes updateAzureResourceRelations and updateWebsiteCertInfo")

	// cmdMongo.PersistentFlags().StringVarP(&subscriptionId, "subscriptionId", "s", "", "Subscription ID to run command against. If not supplied, current default Azure CLI subscription is used.")
	// cmdMongo.PersistentFlags().StringVarP(&resourceGroup, "resourceGroup", "r", "", "Resource group to run command against.")
	// cmdMongo.PersistentFlags().StringVar(&clientId, "clientId", "", "Client ID for Service Principal authentication.")
	// cmdMongo.PersistentFlags().StringVar(&clientSecret, "clientSecret", "", "Client Secret for Service Principal authentication.")
	// cmdMongo.PersistentFlags().StringVarP(&tenantId, "tenantId", "t", "", "Tenant ID.")

	// if subscriptionId == "" {
	// 	sub, err := GetActiveSub()
	// 	if err != nil {
	// 		log.Fatalln(err)
	// 	}
	// 	subscriptionId = sub.ID
	// }

	// Here you will define your flags and configuration settings.

	// Cobra supports Persistent Flags which will work for this command
	// and all subcommands, e.g.:
	// azCmd.PersistentFlags().String("foo", "", "A help for foo")

	// Cobra supports local flags which will only run when this command
	// is called directly, e.g.:
	// azCmd.Flags().BoolP("toggle", "t", false, "Help message for toggle")
}
